=> Map Interface is part of the java.util package and represents a mapping between a key
   and a value. The Java Map interface is not a subtype of the Collections interface. So,
   it behaves differently from the rest of the collection types.

=> Key Features:

1.  No Duplicates in Keys: Keys should be unique, but values can be duplicated.
2.  Null Handling: It allows one null key in implementations like HashMap and LinkedHashMap,
    and allows multiple null values in most implementations.
3.  Thread-Safe Alternatives: Use ConcurrentHashMap for thread-safe operations. Also, wrap an
    existing map using Collections.synchronizedMap() for synchronized access.

=> The Map data structure in Java is implemented by two interfaces:

1. Map Interface
2. SortedMap Interface


=> The three primary classes that implement these interfaces are:

1.   HashMap
2.   TreeMap
3.   LinkedHashMap


=> Methods in Java Map Interface:
                            Methods	                           Action Performed

1.   clear():-	This method is used in Java Map Interface to clear and remove all of the elements
                 or mappings from a specified Map collection.
2.   containsKey(Object):-	This method is used in Map Interface in Java to check whether a
                            particular key is being mapped into the Map or not. It takes the
                            key element as a parameter and returns True if that element is mapped
                            in the map.
3.   containsValue(Object):-	This method is used in Map Interface to check whether a particular
                                value is being mapped by a single or more than one key in the Map.
                                It takes the value as a parameter and returns True if that value is
                                mapped by any of the keys in the map.
4.   entrySet():-	This method is used in Map Interface in Java to create a set out of the same
                    elements contained in the map. It basically returns a set view of the map or
                    we can create a new set and store the map elements into them.
5.   equals(Object):-	This method is used in Java Map Interface to check for equality between
                        two maps. It verifies whether the elements of one map passed as a parameter
                        is equal to the elements of this map or not.
6.   get(Object):-	This method is used to retrieve or fetch the value mapped by a particular key
                    mentioned in the parameter. It returns NULL when the map contains no such
                    mapping for the key.
7.   hashCode():-	This method is used in Map Interface to generate a hashCode for the given map
                    containing keys and values.
8.   isEmpty():-	This method is used to check if a map is having any entry for key and value
                    pairs. If no mapping exists, then this returns true.
9.   keySet():-	This method is used in Map Interface to return a Set view of the keys contained in
                this map. The set is backed by the map, so changes to the map are reflected in the
                set, and vice-versa.
10.   put(Object, Object):-	This method is used in Java Map Interface to associate the specified
                            value with the specified key in this map.
11.   putAll(Map):-	This method is used in Map Interface in Java to copy all of the mappings from
                    the specified map to this map.
12.   remove(Object):-	This method is used in Map Interface to remove the mapping for a key from
                        this map if it is present in the map.
13.   size():-	This method is used to return the number of key/value pairs available in the map.
14.   values()	:-This method is used in Java Map Interface to create a collection out of the
                  values of the map. It basically returns a Collection view of the values in the
                  HashMap.
15.   getOrDefault(Object key, V defaultValue):-	Returns the value to which the specified key
                                                  is mapped, or defaultValue if this map contains
                                                  no mapping for the key.
16.   merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction):-
                                                 If the specified key is not already associated
                                                 with a value or is associated with null,
                                                 associate it with the given non-null value.
17.   putIfAbsent(K key, V value):-	If the specified key is not already associated with a value
                                    (or is mapped to null) associates it with the given value and
                                    returns null, else returns the current associate value.