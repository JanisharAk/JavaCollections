Java Collections Class Fields
The collection class contains 3 fields as listed below which can be used to
return immutable entities.

1. EMPTY_LIST to get an immutable empty List
2. EMPTY_SET to get an immutable empty Set
3. EMPTY_MAP to get an immutable empty Map

Now let us do discuss methods that are present inside this class so that we can
use these inbuilt functionalities later on in our program. Below are the methods
have been listed below in a tabular format as shown below as follows:

Methods and its Description

1. addAll(Collection<? super T> c, T... elements) :- It is used to insert the specified collection
                                                     elements to the specified collection.
2. asLifoQueue(Deque<T> deque) :- 	This method returns a view of a Deque as a Last-in-first-out (Lifo) Queue.
3. binarySearch(List<? extends Comparable> list, T key) :- 	This method searches the key using binary search
                                                            in the specified list.
4. binarySearch(List<? extends T> list, T key, Comparator<? super T> c) :- 	This method searches the
                                                                     specified list for the
                                                specified object using the binary search algorithm.
5. checkedCollection(Collection<E> c, Class<E> type) :- This method returns a dynamically typesafe
                                                        view of the specified collection.
6. checkedList(List<E> list, Class<E> type) :- 	This method returns a dynamically typesafe view of
                                                the specified list.
7. checkedMap(Map<K,V> m, Class<K> keyType, Class<V> valueType) :- 	This method returns a dynamically
                                                                    typesafe view of the specified map.
8. checkedNavigableMap(NavigableMap<K,V> m, Class<K> keyType, Class<V> valueType) :- 	This method returns
                                                                   a dynamically typesafe view
                                                                   of the specified navigable map.
9. checkedNavigableSet(NavigableSet<E> s, Class<E> type) :- This method returns a dynamically
                                                         typesafe view of the specified navigable set.
10. checkedQueue(Queue<E> queue, Class<E> type) :- 	This method returns a dynamically typesafe view
                                                    of the specified queue.
11. checkedSet(Set<E> s, Class<E> type) :- 	This method returns a dynamically typesafe view of the
                                            specified set.
12. checkedSortedMap(SortedMap<K,V> m, Class<K> keyType, Class<V> valueType) :-
                                           This method returns a dynamically typesafe view of the
                                           specified sorted map.
13. checkedSortedSet(SortedSet<E> s, Class<E> type) :- 	This method returns a dynamically typesafe
                                                        view of the specified sorted set.
14. copy(List<? super T> dest, List<? extends T> src) :- 	This method copies all of the elements
                                                            from one list into another.
15. disjoint(Collection<?> c1, Collection<?> c2) :- 	This method returns true if the two
                                                   specified collections have no elements in common.
16. emptyEnumeration() :- 	This method returns an enumeration that has no elements.
17. emptyIterator() :- 	This method returns an iterator that has no elements.
18  emptyList()	 :- This method returns an empty list (immutable).
19. emptyListIterator() :- 	This method returns a list iterator that has no elements.
20. emptyMap() :- 	This method returns an empty map (immutable).

21. emptyNavigableMap() :- 	This method returns an empty navigable map (immutable).
22. emptyNavigableSet() :- 	This method returns an empty navigable set (immutable).
23. emptySet() :- 	This method returns an empty set (immutable).

24. emptySortedMap() :- 	This method returns an empty sorted map (immutable).
25. emptySortedSet() :- 	This method returns an empty sorted set (immutable).
26. enumeration(Collection<T> c) :- 	This method returns an enumeration over the specified
                                        collection.
27. fill(List<? super T> list, T obj) :- 	This method replaces all of the elements of the
                                            specified list with the specified element.
28. frequency(Collection<?> c, Object o) :- 	This method returns the number of elements in the
                                                specified collection equal to the specified object.
29. indexOfSubList(List<?> source, List<?> target)	 :- This method returns the starting position
                                                  of the first occurrence of the specified target
                                                  list within the specified source list, or -1 if
                                                  there is no such occurrence.
30. lastIndexOfSubList(List<?> source, List<?> target)	 :- This method returns the starting
                                                         position of the last occurrence of the
                                                         specified target list within the specifie
                                                 source list, or -1 if there is no such occurrence.
31. list(Enumeration<T> e)	 :- This method returns an array list containing the elements returned
                                by the specified enumeration in the order they are returned by
                                the enumeration.
32. max(Collection<? extends T> coll) :- 	This method returns the maximum element of the given
                                            collection, according to the natural ordering of its
                                            elements.
33. max(Collection<? extends T> coll, Comparator<? super T> comp) :- This method returns the
                                                                 maximum element of the given
                       collection, according to the order induced by the specified comparator.
34. min(Collection<? extends T> coll) :- 	This method returns the minimum element of the given
                                        collection, according to the natural ordering of its elements.
35. min(Collection<? extends T> coll, Comparator<? super T> comp) :- 	This method returns the
                        minimum element of the given collection, according to the order induced
                        by the specified comparator.
36. nCopies(int n, T o) :- 	This method returns an immutable list consisting of n copies of the
                            specified object.
37. newSetFromMap(Map<E,Boolean> map)	 :- This method returns a set backed by the specified map.
38. replaceAll(List<T> list, T oldVal, T newVal) :- This method replaces all occurrences of one
                                                    specified value in a list with another.
39. reverse(List<?> list) :- 	This method reverses the order of the elements in the specified
                                list
40. reverseOrder()	 :- This method returns a comparator that imposes the reverse of the natural
                        ordering on a collection of objects that implement the Comparable interface.
41. reverseOrder(Comparator<T> cmp) :- 	This method returns a comparator that imposes the reverse
                                        ordering of the specified comparator.
42. rotate(List<?> list, int distance) :- 	This method rotates the elements in the specified list
                                            by the specified distance.
43. shuffle(List<?> list) :- 	This method randomly permutes the specified list using a default
                                source of randomness.
44. shuffle(List<?> list, Random rnd) :- 	This method randomly permute the specified list using
                                            the specified source of randomness.
45. singletonMap(K key, V value) :- 	This method returns an immutable map, mapping only the
                                        specified key to the specified value.
46. singleton(T o) :- 	This method returns an immutable set containing only the specified object.
47. singletonList(T o) :- 	This method returns an immutable list containing only the specified
                            object.
48. sort(List<T> list) :- 	This method sorts the specified list into ascending order, according
                            to the natural ordering of its elements.
49. sort(List<T> list, Comparator<? super T> c)	 :- This method sorts the specified list according
                                                 to the order induced by the specified comparator.
50. swap(List<?> list, int i, int j) :-  This method swaps the elements at the specified
                                         positions in the specified list.
51. synchronizedCollection(Collection<T> c) :- 	This method returns a synchronized (thread-safe)
                                                collection backed by the specified collection.
52. synchronizedList(List<T> list) :- 	This method returns a synchronized (thread-safe) list
                                        backed by the specified list.
53. synchronizedMap(Map<K,V> m) :- 	This method returns a synchronized (thread-safe) map backed
                                     by the specified map.
54. synchronizedNavigableMap(NavigableMap<K,V> m) :- 	This method returns a synchronized
                              (thread-safe) navigable map backed by the specified navigable map.
55. synchronizedNavigableSet(NavigableSet<T> s) :- 	This method returns a synchronized
                                                 (thread-safe) navigable set backed by the
                                                 specified navigable set.
56. synchronizedSet(Set<T> s) :- 	This method returns a synchronized (thread-safe) set backed
                                    by the specified set.
57. synchronizedSortedMap(SortedMap<K,V> m)	 :- This method returns a synchronized (thread-safe)
                                                sorted map backed by the specified sorted map.
58. synchronizedSortedSet(SortedSet<T> s) :-  This method returns a synchronized (thread-safe)
                                              sorted set backed by the specified sorted set.
59. unmodifiableCollection(Collection<? extends T> c) :-  This method returns an unmodifiable
                                                          view of the specified collection.
60. unmodifiableList(List<? extends T> list) :- This method returns an unmodifiable view
                                                of the specified list.
61. unmodifiableNavigableMap(NavigableMap<K,? extends V> m) :- 	This method returns an
                                               unmodifiable view of the specified navigable map.
62. unmodifiableNavigableSet(NavigableSet<T> s) :- This method returns an unmodifiable view of
                                                   the specified navigable set.
63. unmodifiableSet(Set<? extends T> s)	 :- This method returns an unmodifiable view of the
                                            specified set.
64. unmodifiableSortedMap(SortedMap<K, ? extends V> m) :- 	This method returns an unmodifiable
                                                            view of the specified sorted map.
65. unmodifiableSortedSet(SortedSet<T> s) :- 	This method returns an unmodifiable view of
                                                the specified sorted set.